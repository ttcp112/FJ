@model NuWebNCloud.Shared.Models.Ingredients.PurchaseOrderModels
@using NuWebNCloud.Shared.Utilities;
@if (Model.ListItem != null)
{
    int index = 0;
    for (int i = 0; i < Model.ListItem.Count; i++)
    {
        //var item = Model.ListItem[i];
        index = i;
        <tr class="ng-IngredientNew" data-ingreId="@Model.ListItem[i].IngredientId" style='@string.Format("display:{0};", Model.ListItem[i].Delete==9?"none":"table-row")'>
            <td>
                <span id="index_@Model.ListItem[i].IngredientId">@(i + 1)</span>
                @Html.Hidden(string.Format("ListItem[{0}].Id", index), Model.ListItem[i].Id, new { @id = "hidId" })
                @Html.Hidden(string.Format("ListItem[{0}].OffSet", index), Model.ListItem[i].OffSet)
                @Html.Hidden(string.Format("ListItem[{0}].IngredientId", index), Model.ListItem[i].IngredientId, new { @id = "hidIngredientId" })
                @Html.Hidden(string.Format("ListItem[{0}].IngredientName", index), Model.ListItem[i].IngredientName, new { @id = "hidIngredientName" })
                @Html.Hidden(string.Format("ListItem[{0}].IngredientCode", index), Model.ListItem[i].IngredientCode, new { @id = "hidIngredientCode" })
                @Html.Hidden(string.Format("ListItem[{0}].Description", index), Model.ListItem[i].Description, new { @id = "hidDescription" })
                @Html.Hidden(string.Format("ListItem[{0}].BaseUOM", index), Model.ListItem[i].BaseUOM, new { @id = "hidBaseUOM" })
                @Html.Hidden(string.Format("ListItem[{0}].Delete", index), Model.ListItem[i].Delete, new { @class = "IngredientStatus" })
                @Html.Hidden(string.Format("ListItem[{0}].IngReceivingQty", index), Model.ListItem[i].IngReceivingQty, new { @class = "hidIngReceivingQty" })
            </td>
            <td>
                @Model.ListItem[i].IngredientCode<br />
                @Html.ValidationMessage(string.Format("ListItem[{0}].Qty", index), new
           {
               @id = "ltrValidate" + Model.ListItem[i].IngredientId,
               @class = "label field-validation-error label-danger"
           })
            </td>
            <td>@Model.ListItem[i].IngredientName</td>
            <td>@Model.ListItem[i].Description</td>
            <td>
                @Html.TextBox(string.Format("ListItem[{0}].Qty", index), Model.ListItem[i].Qty, new
           {
               @class = "form-control text-center",
               @type = "number",
               @min = 0,
               @id = "txtQty",
               @autocomplete = "off",
               @Value = Model.ListItem[i].Qty,
               @onchange = "Calculator()"
           })
            </td>
            <td>@Model.ListItem[i].BaseUOM</td>
            <td>
                @Html.TextBox(string.Format("ListItem[{0}].UnitPrice", index), Model.ListItem[i].UnitPrice, new
           {
               @class = "form-control text-center number",
               //@type = "number",
               //@min = 0,
               @id = "txtUnitPrice",
               @autocomplete = "off",
               @Value = Model.ListItem[i].UnitPrice,
               @onchange = "Calculator()"
           })
            </td>
            <td class="row-tax" id="div_tax_@i">
                @Html.DropDownList(string.Format("ListItem[{0}].TaxId", i),
                    new SelectList(Model.ListItem[i].ListTax, "Value", "Text", Model.ListItem[i].TaxId),
                                @Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please choose tax")).ToString(),
                                new {
                                    @class = "form-control select2_multiple ddl_ingredient_item_tax",
                                    @id = "ddlTax",
                                    @style = "width:100%;",
                                    @onchange = "Calculator()"
                                })
                <!--updated-->
                @Html.Hidden(string.Format("ListItem[{0}].TaxName", index), Model.ListItem[i].TaxName, new { @id = "hidIngTaxName", @class = "cls_TaxName_" + i })
                @Html.Hidden(string.Format("ListItem[{0}].TaxAmount", index), Model.ListItem[i].TaxAmount, new { @id = "hidIngTaxAmount", @class = "cls_TaxAmount_" + i })
                @Html.Hidden(string.Format("ListItem[{0}].IsShowTax", index), Model.ListItem[i].IsShowTax, new { @id = "hidIngIsShowTax", @class = "cls_IsShowTax_" + i })
                @Html.Hidden(string.Format("ListItem[{0}].TaxPercent", index), Model.ListItem[i].TaxPercent, new { @id = "hidIngTaxPercent", @class = "cls_TaxPercent_" + i })
                @Html.Hidden(string.Format("ListItem[{0}].TaxType", index), Model.ListItem[i].TaxType, new { @id = "hidIngTaxType", @class = "cls_TaxType_" + i })

            </td>
            <td>
                <span id="Amount_@Model.ListItem[i].IngredientId">@string.Format("{0} {1:N2}", Model.Symbol, Model.ListItem[i].Amount)</span>
            </td>
            <td>
                <a href="javascript:void(0)" class="a-fnb" onclick="DeleteTabPanel('@Model.ListItem[i].IngredientId'); return false;">
                    <i class="fa fa-remove" style="font-size:20px; color:red; padding-top:5px;"></i>
                </a>
            </td>
        </tr>
    }
}

<script>
    // mini jQuery plugin that formats to two decimal places
    (function ($) {
        $.fn.numberFormat = function () {
            this.each(function (i) {
                $(this).change(function (e) {
                    if (isNaN(parseFloat(this.value))) return;
                    this.value = parseFloat(this.value).toFixed(2);
                });
            });
            return this; //for chaining
        }
    })(jQuery);

    $(document).ready(function () {
        // apply the numberFormat behaviour to elements with 'number' as their class
        $(function () {
            $('.number').numberFormat();
        });
        //===============
        $(".number").each(function (i) {
            if (isNaN(parseFloat(this.value)))
                return;
            this.value = parseFloat(this.value).toFixed(2);
        });

         $(".ddl_ingredient_item_tax").select2({
            placeholder: "@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please choose tax"))"
        });

    });
</script>