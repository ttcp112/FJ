@using NuWebNCloud.Shared.Utilities;
@using NuWebNCloud.Shared
@model NuWebNCloud.Shared.Models.Sandbox.Inventory.Product.ProductModels
@{
    Html.EnableUnobtrusiveJavaScript(true);
    var _ID = Model.ID;
}
@Html.HiddenFor(model => model.ID)
@if (!string.IsNullOrEmpty(_ID))
{
    @Html.Hidden("StoreID", Model.StoreID)
    @Html.Hidden("ImageURL", Model.ImageURL)
    @Html.Hidden("Printer", Model.Printer)
}

<div class="row form-horizontal form-label-left" style="margin-bottom:15px;">
    <!--Image Placeholder-->
    <div class="form-group">
        <label class="col-md-2 control-label"> </label>
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(Model.ImageURL))
            {
                <img id="upload-preview" src="@Model.ImageURL" height="100" width="100" class="img-circle" />
            }
            else
            {
                <img id="upload-preview" class="img-circle" src="@Commons.Image100_100" height="100" width="100" />
            }
        </div>
    </div>
    <!--IMAGE-->
    <div class="form-group">
        <label class="col-md-2 control-label">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Image")) </label>
        <div class="col-md-6">
            <button class="btn btn-default" type="button" onclick="showPictureUpload();">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Choose file"))</button>
            @Html.TextBoxFor(model => model.PictureUpload, new { @type = "file", @onchange = "PreviewImage(this,\"upload-preview\")", @accept = "*.jpg", @class = "hidden", @id = "urlImage", })
            @Html.ValidationMessageFor(model => model.PictureUpload, null, new { @class = "label" })
        </div>
    </div>

    @*Choose Store*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Choose Store"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @*@Html.DropDownListFor(model => model.StoreID,
             new SelectList(@ViewBag.ListStore, "Value", "Text", Model.StoreID), @Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please choose Store")).ToString(),
             !string.IsNullOrEmpty(_ID) ? (object)new
             {
                 @class = "form-control select2_multiple",
                 @disabled = "disabled",
                 @id = "storeDdl",
                 @style = "width:100%;"
             } : new
             {
                 @class = "form-control select2_multiple",
                 @id = "storeDdl",
                 @style = "width:100%;"
             })*@

            @*Group by company, updated 041420180*@
            @Html.DropDownListFor(model => model.StoreID,
             (SelectList)ViewBag.StoreID,
             !string.IsNullOrEmpty(_ID) ? (object)new
             {
                 @class = "form-control select2_multiple",
                 @disabled = "disabled",
                 @id = "storeDdl",
                 @style = "width:100%;"
             } : new
             {
                 @class = "form-control select2_multiple",
                 @id = "storeDdl",
                 @style = "width:100%;"
             })
            @Html.ValidationMessageFor(model => model.StoreID, null, new { @class = "label" })
        </div>
    </div>

    @*Defaul Name*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Default Name"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = ""+ Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dish's Default Name")) + "", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.Name, null, new { @class = "label" })
        </div>
    </div>

    @*Product CODE*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dish Code"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.ProductCode, new { @class = "form-control", placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dish Code")) + "" })
            @Html.ValidationMessageFor(model => model.ProductCode, null, new { @class = "label" })
        </div>
    </div>

    @*BAR CODE*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("BarCode"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.BarCode, new { @class = "form-control", placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("BarCode")) + "" })
            @Html.ValidationMessageFor(model => model.BarCode, null, new { @class = "label" })
        </div>
    </div>
    @*Color Code*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12 lineHeight">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Color code"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.ColorCode, new { @class = "form-control", placeholder = "#FFFFFF" })
            @Html.ValidationMessageFor(model => model.ColorCode, null, new { @class = "label" })
        </div>
    </div>
    @*Sequence*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Sequence"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.OrderByIndex, new { @class = "form-control", @type = "number", @min = 0,
            @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Sequence")) + "" })
            @Html.ValidationMessageFor(model => model.OrderByIndex, null, new { @class = "label" })
        </div>
    </div>

    @* Active*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Active"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsActive)</label>
        </div>
    </div>

    @*Kitchen Display Name*@
    <div class="form-group">
        <label for="" class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Kitchen Display Name")) </label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Description, new { @class = "form-control",
           @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("To be shown")) + "" })
            @Html.ValidationMessageFor(model => model.Description, null, new { @class = "label" })
        </div>
    </div>

    @*Print out Name*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Print out Name"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.PrintOutText, new { @class = "form-control",
           @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("To be printed")) + "" })
            @Html.ValidationMessageFor(model => model.PrintOutText, null, new { @class = "label" })
        </div>
    </div>

    @*Prices*@
    <div class="prices-div">
        @Html.Partial("~/Views/SBInventoryBase/_Price.cshtml", Model)
    </div>

    @*Cost*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Cost"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Cost, new { @class = "form-control",
           @placeholder = "0", type = "number", min = 0 })
            @Html.ValidationMessageFor(model => model.Cost, null, new { @class = "label" })
        </div>
    </div>

    @*Unit*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Unit"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Unit, new { @class = "form-control",
           @placeholder = "0", type = "number", min = 0 })
            @Html.ValidationMessageFor(model => model.Unit, null, new { @class = "label" })
        </div>
    </div>

    @*Quantity*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Quantity"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Quantity, new { @class = "form-control",
           @placeholder = "0", type = "number", min = 0 })
            @Html.ValidationMessageFor(model => model.Quantity, null, new { @class = "label" })
        </div>
    </div>

    @*Limit*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Limit"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Limit, new { @class = "form-control",
           @placeholder = "0", type = "number", min = 0 })
            @Html.ValidationMessageFor(model => model.Limit, null, new { @class = "label" })
        </div>
    </div>

    @*Category*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Category"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="category">
                @*@Html.DropDownListFor(model => model.CategoryID, new SelectList(Model.ListCategories, "Value", "Text", Model.CategoryID),
                @Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please choose category")).ToString(), new
                {
                    @class = "form-control select2_multiple",
                    @onchange = "ChangeCategory(this)",
                    @id = "ddlCategory",
                    @style = "width:100%;"
                })*@
                @*Updated 08282017*@
                <select class="form-control select2_multiple" style="width: 100%" id="ddlCategory" onchange="ChangeCategory(this)" name="CategoryID">
                    <option></option>
                    @foreach (var cate in Model.lstCateGroup)
                    {
                        <option class="@cate.Level" value="@cate.Id" @if(cate.Selected) {@Html.Raw("selected")} >@cate.Name</option>
                    }
                </select>
            </div>
            @Html.ValidationMessageFor(model => model.CategoryID, null, new { @class = "label" })
        </div>
    </div>

    @*Open Price*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Open Price"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsAllowedOpenPrice)</label>
        </div>
    </div>

    @*Expired Date*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Expired Date"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.ExpiredDate, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker",
           @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Unlimited")) + "" })
        </div>
    </div>

    @*Measure*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Unit of Measurement"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Measure, new { @class = "form-control",
           @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Unit of Measurement")) + "" })
            @Html.ValidationMessageFor(model => model.Measure, null, new { @class = "label" })
        </div>
    </div>

    @*Print on check*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Print On Check"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsPrintedOnCheck)</label>
        </div>
    </div>

    @*Allow Discount*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Allow to Apply Discount/Promotion"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsAllowedDiscount)</label>
        </div>
    </div>

    @*Check Stock*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Check Stock"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsCheckedStock)</label>
        </div>
    </div>

    @*Service Charge*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Service Charge"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="input-group">
                <span class="input-group-addon">
                    @Html.CheckBoxFor(model => model.HasServiceCharge, new { @class = "chb-ServiceCharge", onchange = "ToggleComponent(this, '.txt-ServiceCharge')", id = "chbServiceCharge" })
                </span>
                @Html.TextBoxFor(model => model.sServiceCharge, new { @class = "form-control txt-ServiceCharge", type = "number", id = "txtServiceCharge" })
                <div class="input-group-addon">%</div>
            </div>
            @Html.ValidationMessageFor(model => model.ServiceCharge, null, new { @class = "label" })
        </div>
    </div>

    @*Forced Modifier*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Forced Modifier Popup"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsForce)</label>
        </div>
    </div>

    @*Optional Modifier*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Optional Modifier Popup"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsOptional)</label>
        </div>
    </div>
    @*Additional Dishes*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Additional Dishes"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsAddition)</label>
        </div>
    </div>
    @*Kiosk Availability*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Kiosk Availability"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="Season">
                @Html.TextBoxFor(model => model.ProductSeason, new
           {
               @class = "form-control",
               @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("All")) + "",
               @readonly = "readonly",
               @id = "txtKiosk",
               @onfocus = "ShowModalSeason()"
           })
            </div>
            @Html.ValidationMessageFor(model => model.ProductSeason, null, new { @class = "label" })
            <span style="color:red; display:none" id="errStore">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please apply to store first"))</span>
        </div>
    </div>
    <!-- Modal Add Item-->
    <div class="modal fade" id="modalSeason" tabindex="-1" role="dialog" aria-labelledby="modalItemLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
                    <h4 class="modal-title">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Choose Season"))</h4>
                </div>
                <div class="modal-body scroll" id="popupSeason">
                    <div class="form-group-sm">
                        <table class="table center-content">
                            <thead>
                                <tr style="background-color:#34495e; color:#fff;">
                                    <th width="20%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Name"))</th>
                                    <th width="40%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Day Range"))</th>
                                    <th width="10%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Start Date"))</th>
                                    <th width="10%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("End Date"))</th>
                                    <th width="18%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Time"))</th>
                                    <th width="2%" style="text-align:center;">@Html.CheckBox(" ", new { @id = "chball", @class = "chbcheckall", onchange = "ToggleChooseSeasonTime()", })</th>
                                </tr>
                            </thead>
                            <tbody id="body-season" class="timeslot">
                                @if (Model.ListProductSeason != null)
                                {
                                    @Html.Partial("~/Views/SBInventoryBase/_ChooseSeason.cshtml", Model)
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <span></span>
                    <button class="btn btn-default" data-dismiss="modal" onclick="SetProductNameSeason()">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Close"))</button>
                    @*<button type="button" class="btn btn-beauty bg-fnb" data-dismiss="modal">Save</button>*@
                </div>
            </div>
        </div>
    </div>

    @*POS Availability*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12 lineHeight">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("POS Availability"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="Season">
                @Html.TextBoxFor(model => model.ProductSeasonPOS, new
           {
               @class = "form-control",
               @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("All")) + "",
               @readonly = "readonly",
               @id = "txtPOS",
               @onfocus = "ShowModalSeasonPOS()"
           })
            </div>
            @Html.ValidationMessageFor(model => model.ProductSeasonPOS, null, new { @class = "label" })
            <span style="color:red; display:none" id="errStorePOS">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please apply to store first"))</span>
        </div>
    </div>

    <!-- Modal Add Item-->
    <div class="modal fade" id="modalSeasonPOS" tabindex="-1" role="dialog" aria-labelledby="modalItemLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
                    <h4 class="modal-title">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Choose Season"))</h4>
                </div>
                <div class="modal-body scroll" id="popupSeasonPOS">
                    <div class="form-group-sm">
                        <table class="table center-content">
                            <thead>
                                <tr style="background-color:#34495e; color:#fff;">
                                    <th width="20%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Name"))</th>
                                    <th width="40%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Day Range"))</th>
                                    <th width="10%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Start Date"))</th>
                                    <th width="10%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("End Date"))</th>
                                    <th width="18%" style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Time"))</th>
                                    <th width="2%" style="text-align:center;">@Html.CheckBox(" ", new { @id = "chball", @class = "chbcheckallPOS", onchange = "ToggleChooseSeasonTimePOS()", })</th>
                                </tr>
                            </thead>
                            <tbody id="body-season-pos" class="timeslotPOS">
                                @if (Model.ListProductSeasonPOS != null)
                                {
                                    @Html.Partial("~/Views/SBInventoryBase/_ChooseSeasonPOS.cshtml", Model)
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <span></span>
                    <button class="btn btn-default" data-dismiss="modal" onclick="SetProductNameSeasonPOS()">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Close"))</button>
                </div>
            </div>
        </div>
    </div>
    @*Tax *@
    @*<div class="form-group">
            <label class="control-label col-md-2 col-sm-2 col-xs-12">   Tax</label>
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.DisplayFor(model=>model.Tax)
            </div>
        </div>*@
    @* Default Status *@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Default Status"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div>
                @Html.DropDownListFor(model => model.DefaultState,
               new SelectList(Model.ListDefaultStatus, "Value", "Text", Model.DefaultState),
               @Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please choose default Status")).ToString(),
               new
               {
                   @class = "form-control select2_multiple",
                   @id = "ddlDefaultStatus",
                   @style = "width:100%;"
               })
            </div>
            @Html.ValidationMessageFor(model => model.DefaultState, null, new { @class = "label" })
        </div>
    </div>

    @*Coming Soon*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Coming Soon"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <label>@Html.CheckBoxFor(model => model.IsComingSoon)</label>
        </div>
    </div>

    @*Dish Information*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dish Information"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Info, new { @class = "form-control",
           @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dish Information")) + "" })
            @Html.ValidationMessageFor(model => model.Info, null, new { @class = "label" })
        </div>
    </div>

    @* kiosk Message*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Show Kiosk Message"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <div class="input-group">
                <span class="input-group-addon">
                    @Html.CheckBoxFor(model => model.IsShowMessage)
                </span>
                @Html.TextBoxFor(model => model.Message, new { @class = "form-control",
               @placeholder = "" + Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Kiosk Message")) + "" })
                @Html.ValidationMessageFor(model => model.Message, null, new { @class = "label" })
            </div>
        </div>
    </div>

    @* Printer*@
    <div class="form-group">
        <label class="control-label col-md-2 col-sm-2 col-xs-12">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Printer"))</label>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.TextBoxFor(model => model.Printer, new
       {
           @class = "form-control",
           @placeholder = "",
           @readonly = "readonly",
           @id = "txtPrinter",
           @onfocus = "ShowModalPrinter()"
       })
            @Html.ValidationMessageFor(model => model.lPrinter, null, new { @class = "label" })
            <span style="color:red; display:none" id="errStorePrinter">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please apply to store first"))</span>
        </div>
    </div>
    <!-- Modal Add Item-->
    <div class="modal fade" id="modalPrinter" tabindex="-1" role="dialog" aria-labelledby="modalItemLabel">
        <div class="modal-dialog modal-small" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
                    <h4 class="modal-title">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Choose Printer"))</h4>
                </div>
                <div class="modal-body scroll">
                    <div class="form-group-sm">
                        <table class="table center-content">
                            <thead>
                                <tr style="background-color:#34495e; color:#fff;">
                                    <th width="98%">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Printer Name"))</th>
                                    <th width="2%" style="text-align:center;">
                                        @*<input type="checkbox" id="chkAllPrinter" onchange="ToggleAllPrinter(this)" />*@
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="body-season" class="printer">
                                @if (Model.LstPrinter != null)
                                {
                                    @Html.Partial("~/Views/SBInventoryBase/_ChoosePrinter.cshtml", Model)
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <span></span>
                    <button class="btn btn-default" data-dismiss="modal" onclick="SetNamePrinter()">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Close"))</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Table Mediate-->
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10" style="float:none;margin-bottom:5px;"><strong>Modifiers</strong></div>
        <div id="div-mediate" class="col-md-offset-2 col-md-10" style="float:none;">
            <table class="table center-content" style="margin-bottom:10px;">
                <thead>
                    <tr style="background-color:#34495e; color:#fff;">
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Sequence"))</th>
                        <th width="30%">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Tab Name"))</th>
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Display Message"))</th>
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Quantity"))</th>
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Type"))</th>
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Modifiers"))</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody style="max-height:500px; overflow-y:auto; overflow-x:hidden !important;">
                    @if (Model.ListGroup != null && Model.ListGroup.Count > 0)
                    {
                        for (int i = 0; i < Model.ListGroup.Count; i++)
                        {
                            // For Force Modifier & Optional Modifier
                            if (Model.ListGroup[i].Type != (byte)Commons.EModifierType.AdditionalDish)
                            {
                                @Html.Partial("_TabContent", Model.ListGroup[i])
                            }
                        }
                    }
                    <!-- Button Add More Tab Content-->
                    <tr id="tr-add-more-tab">
                        <td style="padding-top:12px; text-align:left" colspan="7">
                            <a id="btn-add-more-tab" href="#" class="a-fnb" onclick="AddMoreTab(this, true); return false;" style="font-size:16px; color:#34495e;">
                                @*<i class="glyphicon glyphicon-plus-sign"></i>*@
                                <i class="fa fa-plus"></i>
                                <span>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Add more"))</span>
                            </a>
                            <span style="color:red; display:none"><strong>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please apply to store first"))</strong></span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        @Html.ValidationMessage("Dish", new { @class = "col-md-offset-2 col-md-10 label", @style= "text-align:left; background-color:#fff; font-size:13px; color:red; line-height: 28px; position:relative; top:-15px;" })
    <!-- Table Additional Dishes-->
        <div class="col-md-offset-2 col-md-10" style="float:none;margin-bottom:5px;"><strong>Additional Dishes</strong></div>
        <div id="div-additional-dishes" class="col-md-offset-2 col-md-10" style="float:none;">
            <table class="table center-content" style="margin-bottom:10px;">
                <thead>
                    <tr style="background-color:#34495e; color:#fff;">
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Sequence"))</th>
                        <th width="30%">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Tab Name"))</th>
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Display Message"))</th>
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Quantity"))</th>
                        <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dishes"))</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody style="max-height:500px; overflow-y:auto; overflow-x:hidden !important;">
                    @if (Model.ListGroup != null && Model.ListGroup.Count > 0)
                    {
                        for (int i = 0; i < Model.ListGroup.Count; i++)
                        {
                            // For Additional Dishes
                            if (Model.ListGroup[i].Type == (byte)Commons.EModifierType.AdditionalDish)
                            {
                                @Html.Partial("_TabContentAdditionalDish", Model.ListGroup[i])
                            }
                        }
                    }
                    <!-- Button Add More Tab Content-->
                    <tr id="tr-add-more-tab-additional-dish">
                        <td style="padding-top:12px; text-align:left" colspan="7">
                            <a id="btn-add-more-tab-additional-dish" href="#" class="a-fnb" onclick="AddMoreTab(this, false); return false;" style="font-size:16px; color:#34495e;">
                                <i class="fa fa-plus"></i>
                                <span>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Add more"))</span>
                            </a>
                            <span style="color:red; display:none"><strong>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Please apply to store first"))</strong></span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Modal Choose Dishes-->
    <div class="modal fade second" id="modal-choose-dishes" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!--Header-->
                <div class="modal-header">
                    <h4 class="modal-title">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Choose Modifier(s)"))</h4>
                </div>

                <!--Body-->
                <div class="modal-body scroll">
                    <div class="form-group">
                        <div class="col-md-12 col-xs-12">
                            <div class="input-group">
                                <input type="text" class="form-control col-md-10" placeholder="@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Enter Modifier's Name to search"))"
                                       onkeypress="HandleKeyPress(event)" id="txtSearchModifier" />
                                <div class="input-group-btn">
                                    <button type="button" onclick="SearchModifier(this, true); return false;" class="btn bg-fnb">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group-sm">
                        <table class="table table-striped table-hover marginbottomTable">
                            <thead>
                                <tr style="background-color:#34495e; color:#fff;">
                                    <th style="width:1%;">@*<input type="checkbox" onchange="ToogleCheckAll(this, '#list-dishes')">*@</th>
                                    <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Modifier's Name"))</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div id="tbl-choose-dishes" class="form-group-sm">
                    </div>
                </div>

                <!--Footer-->
                <div class="modal-footer">
                    <button class="btn btn-default" data-dismiss="modal">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Cancel"))</button>
                    <button onclick="AddModifiers(this, true)" type="button" class="btn btn-beauty bg-fnb">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Add"))</button>
                </div>

            </div>
        </div>
    </div>

    <!-- Modal Choose Additional Dishes-->
    <div class="modal fade second" id="modal-choose-additional-dishes" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!--Header-->
                <div class="modal-header">
                    <h4 class="modal-title">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Choose Dish(es)"))</h4>
                </div>

                <!--Body-->
                <div class="modal-body scroll">
                    <div class="form-group">
                        <div class="col-md-12 col-xs-12">
                            <div class="input-group">
                                <input type="text" class="form-control col-md-10" placeholder="@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Enter Dish's Name to search"))"
                                       onkeypress="HandleKeyPress(event)" id="txtSearchAdditionalDishes" />
                                <div class="input-group-btn">
                                    <button type="button" onclick="SearchModifier(this, false); return false;" class="btn bg-fnb">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group-sm">
                        <table class="table table-striped table-hover marginbottomTable">
                            <thead>
                                <tr style="background-color:#34495e; color:#fff;">
                                    <th style="width:1%;">@*<input type="checkbox" onchange="ToogleCheckAll(this, '#list-dishes')">*@</th>
                                    <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dish's Name"))</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div id="tbl-choose-additional-dishes" class="form-group-sm">
                    </div>
                </div>

                <!--Footer-->
                <div class="modal-footer">
                    <button class="btn btn-default" data-dismiss="modal">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Cancel"))</button>
                    <button onclick="AddModifiers(this, false)" type="button" class="btn btn-beauty bg-fnb">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Add"))</button>
                </div>

            </div>
        </div>
    </div>

    <!-- Modal Choose Dish-->
    <div class="modal fade second" id="modal-choose-dish" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!--Header-->
                <div class="modal-header">
                    <h4 class="modal-title">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Change Modifiers"))</h4>
                </div>

                <!--Body-->
                <div class="modal-body scroll">
                    <div class="form-group">
                        <div class="col-md-12 col-xs-12">
                            <div class="input-group">
                                <input type="text" class="form-control col-md-10" placeholder="@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Enter Modifier's Name to search"))" />
                                <div class="input-group-btn">
                                    <button type="button" class="btn bg-fnb">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group-sm">
                        <table class="table table-striped table-hover marginbottomTable">
                            <thead>
                                <tr style="background-color:#34495e; color:#fff;">
                                    <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Modifier's Name"))</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div id="tbl-choose-dish" class="form-group-sm">
                    </div>
                </div>

                <!--Footer-->
                <div class="modal-footer">
                    <span></span>
                    <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <button onclick="AddModifiers(this, true)" type="button" class="btn btn-beauty bg-fnb">
                        @Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Add"))
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Change Additional Dish-->
    <div class="modal fade second" id="modal-change-additional-dish" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <!--Header-->
                <div class="modal-header">
                    <h4 class="modal-title">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Change Dish"))</h4>
                </div>

                <!--Body-->
                <div class="modal-body scroll">
                    <div class="form-group">
                        <div class="col-md-12 col-xs-12">
                            <div class="input-group">
                                <input type="text" class="form-control col-md-10" placeholder="@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Enter Dish's Name to search"))" />
                                <div class="input-group-btn">
                                    <button type="button" class="btn bg-fnb">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group-sm">
                        <table class="table table-striped table-hover marginbottomTable">
                            <thead>
                                <tr style="background-color:#34495e; color:#fff;">
                                    <th>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Dish's Name"))</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div id="tbl-change-additional-dish" class="form-group-sm">
                    </div>
                </div>

                <!--Footer-->
                <div class="modal-footer">
                    <span></span>
                    <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <button onclick="AddModifiers(this, false)" type="button" class="btn btn-beauty bg-fnb">
                        @Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Add"))
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" language="javascript">

    var btnGlobal;
    var listItem;

    $(document).ready(function (e) {

        //=== Select Store
        $("#storeDdl").select2().val(@Html.Raw(Json.Encode(Model.StoreID))).trigger('change.select2');

        // Updated 09092017
        StoreID = $("#storeDdl").val();

        if ($(".chb-ServiceCharge").prop('checked')) {
            $(".txt-ServiceCharge").attr('readonly', false);
        } else {
            $(".txt-ServiceCharge").attr('readonly', true);
        }

        $("#modalAddDishes").on('shown.bs.modal', function (e) {
            var body = $("#modalAddDishes").find('.modal-body');
            // do something...
            $.ajax({
                url: '@Url.Action("LoadMediateSetMenu", "SBInventoryDishes")',
                type: 'post',
                traditional: true,
                data: { level: Level, selectedIndex: SelectedIndex },
                dataType: 'html',
                beforeSend: function () {
                    $('.se-pre-con').show();
                },
                success: function (data) {
                    $("#div-dish").html(data);
                },
                error: function () {
                },
                complete: function () {
                    $('.se-pre-con').hide();
                }
            });
        })

        $("#btn-search-dish").click(function () {
            var trs = [];
            $("#div-dish").find('tbody tr:not(.active)').each(function () {
                trs.push(this);
                $(this).css('display', 'table-row');
            });
            var keySearch = $.trim($("#KeySearchDish").val()).replace('  ', ' ');
            var arrKeySearch = keySearch.split(' ');
            if (keySearch != '') {
                for (var i = 0; i < trs.length; i++) {
                    var name = $.trim($(trs[i]).find('td:first').text());
                    for (var j = 0; j < arrKeySearch.length; j++) {
                        if (name.toLowerCase().indexOf(arrKeySearch[j]) != -1) {
                            $(trs[i]).css('display', 'table-row');
                            break;
                        }
                        else
                            $(trs[i]).css('display', 'none');
                    }
                }
            }
        });

        $("#modal-search-dish").on('show.bs.modal', function (event) {
            btn = $(event.relatedTarget) // Button that triggered the modal
        })

        $("#modal-choose-dishes").on('show.bs.modal', function (event) {
            btnGlobal = $(event.relatedTarget); // Button that triggered the modal
            //=========
            var OffSet = btnGlobal.data('whatever');
            console.log(OffSet);
            listItem = [];
            $('.dish_' + OffSet + ':visible').each(function (index, value) {
                listItem.push($(this).attr('data-id'));
            });
            $('#txtSearchModifier').val('');
            //==========
            $("#tbl-choose-dishes").html('');
        });

        $("#modal-choose-dishes").on('shown.bs.modal', function (event) {
            btnGlobal = $(event.relatedTarget); // Button that triggered the modal
            LoadModifiers("#tbl-choose-dishes", true, true);
        });

        //$("#modal-choose-dish").on('shown.bs.modal', function (event) {
        //    btnGlobal = $(event.relatedTarget); // Button that triggered the modal
        //    LoadModifiers("#tbl-choose-dish", false, true);
        //})

        // Updated 09012017
        $("#btn-search-additional-dish").click(function () {
            var trs = [];
            $("#div-additional-dish").find('tbody tr:not(.active)').each(function () {
                trs.push(this);
                $(this).css('display', 'table-row');
            });
            var keySearch = $.trim($("#KeySearchAdditionalDish").val()).replace('  ', ' ');
            var arrKeySearch = keySearch.split(' ');
            if (keySearch != '') {
                for (var i = 0; i < trs.length; i++) {
                    var name = $.trim($(trs[i]).find('td:first').text());
                    for (var j = 0; j < arrKeySearch.length; j++) {
                        if (name.toLowerCase().indexOf(arrKeySearch[j]) != -1) {
                            $(trs[i]).css('display', 'table-row');
                            break;
                        }
                        else
                            $(trs[i]).css('display', 'none');
                    }
                }
            }
        });

        $("#modal-search-additional-dish").on('show.bs.modal', function (event) {
            btn = $(event.relatedTarget) // Button that triggered the modal
        })
        $("#modal-choose-additional-dishes").on('show.bs.modal', function (event) {
            btnGlobal = $(event.relatedTarget); // Button that triggered the modal
            //=========
            var OffSet = btnGlobal.data('whatever');
            listItem = [];
            $('.additional_dish_' + OffSet + ':visible').each(function (index, value) {
                listItem.push($(this).attr('data-id'));
            });
            $('#txtSearchAdditionalDishes').val('');
            //==========
            $("#tbl-choose-additional-dishes").html('');
        });

        $("#modal-choose-additional-dishes").on('shown.bs.modal', function (event) {
            btnGlobal = $(event.relatedTarget); // Button that triggered the modal
            LoadModifiers("#tbl-choose-additional-dishes", true, false);
        });

        //$("#modal-change-additional-dish").on('shown.bs.modal', function (event) {
        //    btnGlobal = $(event.relatedTarget); // Button that triggered the modal
        //    LoadModifiers("#tbl-change-additional-dish", false, false);
        //})

        // Updated 09092017
        // Hide elements which are chosen, for edit a element
        //$("#modal-choose-dish").on('show.bs.modal', function (event) {
        //    btnGlobal = $(event.relatedTarget); // Button that triggered the modal
        //    //=========
        //    var OffSet = btnGlobal.data('whatever');
        //    listItem = [];
        //    $('.dish_' + OffSet + ':visible').each(function (index, value) {
        //        listItem.push($(this).attr('data-id'));
        //    });
        //    $('#txtSearchModifier').val('');
        //    //==========
        //    $("#tbl-choose-dish").html('');
        //});

        //$("#modal-change-additional-dish").on('show.bs.modal', function (event) {
        //    btnGlobal = $(event.relatedTarget); // Button that triggered the modal
        //    //=========
        //    var OffSet = btnGlobal.data('whatever');
        //    listItem = [];
        //    $('.additional_dish_' + OffSet + ':visible').each(function (index, value) {
        //        listItem.push($(this).attr('data-id'));
        //    });
        //    $('#txtSearchAdditionalDishes').val('');
        //    //==========
        //    $("#tbl-change-additional-dish").html('');
        //});
    });

    function AddMoreTab(e, isModifier) {
        if (StoreID == '') {
            $(e).next().css('display', 'block');
            return false;
        }
        $(e).next().css('display', 'none');
        AddTab(e, isModifier);
    }

    function ChooseDish(tr) {
        var name = $(tr).find('td:first').text();
        var id = $(tr).attr('data-id');
        $(btnGlobal).parents("div:first").find('input[type="text"]').val(name);
        $(btnGlobal).parents("div:first").find('input[name*=ItemID]').val(id);
        var modal = $(tr).parents('.modal:first');
        $(modal).modal('hide');
    }

    //Add Tab's Content
    function AddTab(btn, isModifier) {
        $('.se-pre-con').show();

        var countModifierEl = $("#div-mediate > table > tbody > tr").length;
        var countAddDishEl = $("#div-additional-dishes > table > tbody > tr").length;
        var currentOffset = countModifierEl + countAddDishEl - 2;
        var elementAdd = "#tr-add-more-tab";

        if (!isModifier) {
            elementAdd = "#tr-add-more-tab-additional-dish";
        }
        // Find OffSet
        //var currentOffset = $("#div-mediate > table > tbody > tr").length - 1;
        $.ajax({
            url: '@Url.Action("AddTab","SBInventoryDishes")',
            type: 'get',
            data: {
                currentOffset: currentOffset,
                isModifier: isModifier
            },
            dataType: 'html',
            success: function (data) {
                $('.se-pre-con').hide();
                $(elementAdd).before(data);
            }
        });
    }

    function AddModifiers(btn, isModifier) {
        var groupOffSet = $(btnGlobal).parents('tr:last').find('input[name*="OffSet"]').val();
        var currentOffset = $(btnGlobal).parents('table:first > tbody').find('tr').length - 1;
        var trs = $(btn).parents('.modal').find('.modal-body table tbody tr');
        var data = [];
        for (var i = 0; i < trs.length; i++) {
            var tr = trs[i];
            if ($(tr).find('td input[type="checkbox"]').prop('checked')) {
                var ProductID = $(tr).attr('data-id');
                var Name = $(tr).find('td #hidName').val();
                var Seq = parseInt($(tr).find('td #hidSeq').val());
                var ExtraPrice = parseFloat($(tr).find('td #hidExtraPrice').val());
                var ProductOnGroupModels = {
                    ProductID: ProductID,
                    ProductName: Name,
                    Seq: Seq,
                    ExtraPrice: ExtraPrice,
                }
                data.push(ProductOnGroupModels);
            }
        }

        var GroupProductModels = {
            ListProductOnGroup: data,
            currentgroupOffSet: groupOffSet,
            currentOffset: currentOffset,
            isModifier: isModifier
        }

        if (data.length > 0) {
            $('.se-pre-con').show();
            $.ajax({
                type: "POST",
                url: '@Url.Action("AddModifiers", "SBInventoryDishes")',
                traditional: true,

                //data: { dishIDs: ids, currentgroupOffSet: groupOffSet, currentDishOffset: currentDishOffSet },
                //dataType: 'html',

                data: JSON.stringify(GroupProductModels),
                contentType: "application/json; charset=utf-8",
                dataType: "html",

                success: function (data) {
                    $('.se-pre-con').hide();
                    $(btnGlobal).parents('tr:first').before(data);
                    $(btn).parents('.modal:first').modal('hide');
                    //========
                    $('#popupTabConent').css({ "overflow": "auto", "height": $(window).height() - 200 + "px" })
                }
            });
        }
    }

    function ShowModalAddDish(btn) {

        var tr = $(btn).parents('tr:first');
        var modal = $(tr).find(".modal");
        var contentWidth = ($("html").width() - $(".main-sidebar").width()) / 2;
        var marginLeft = (contentWidth - 450) + $(".main-sidebar").width();
        $(modal).modal({
            keyboard: false,
            show: true,
            //backdrop: false
        });
        CopyHtml($(btn).parents('tr:first').find('table > tbody > tr'));
    }

    function AddMoreDish(btn, isModifier) {
        $('.se-pre-con').show();
        var tr = $(btn).parents('tr:first')
        $.ajax({
            url: '@Url.Action("AddDish", "SBInventoryDishes")',
            type: 'get',
            data: {
                offset: 1,
                isModifier: isModifier
            },
            dataType: 'html',
            success: function (data) {
                $('.se-pre-con').hide();
                $(tr).before(data);
            }
        });
        return false;
    }

    function DeleteTabPanel(btn) {
        var result = confirm("@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Are you sure"))?");
        var tr = $(btn).parents('tr:first');
        if (result) {
            $(tr).find('input[name*=Name]:first').val("Deleted");
            $(tr).find('input[name*=DisplayMessage]:first').val("Deleted");
            $(tr).find('input[name*=Quantity]:first').val(1);

            $(tr).find('input.GroupStatus').val(9);
            $(tr).css('display', 'none');
        }
    }

    function DeleteModifier(btn) {
        var result = confirm("@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Are you sure"))?");
        var tr = $(btn).parents('tr:first');

        if (result) {
            $(tr).find('input.DishStatus').val(9);
            $(tr).css('display', 'none');
        }
    }

    function LoadModifiers(container, isMultiChoice, isModifier) {
        $('.se-pre-con').show();
        $.ajax({
            url: '@Url.Action("LoadModifiers", "SBInventoryDishes")',
            type: 'get',
            data: {
                isMultiChoice: isMultiChoice,
                StoreID: StoreID,
                isModifier: isModifier
            },
            dataType: 'html',
            traditional: true,
            beforeSend: function () {
                $('.se-pre-con').show();
            },
            error: function (e) {
            },
            success: function (data) {
                $(container).html(data);
                ResizeModal(container, 300);
                console.log(listItem);
                $('.SpecificItems').each(function (index, value) {
                    var dataId = $(this).attr('data-id');
                    if (listItem.indexOf(dataId) != -1) {
                        $(this).addClass('hide');//.hide();
                    }
                });
            },
            complete: function () {
                $('.se-pre-con').hide();
            }
        });
    }

    var HtmlCloned = '';
    function CopyHtml(container) {
        HtmlCloned = $(container).clone();
    }

    function PasteHtml(container) {
        $(container).html(HtmlCloned);
    }

    function CheckModifier(btn, isModifier) {
        var form = $(btn).parents('form:first');

        var elementAdd = "#div-mediate";
        if (!isModifier) {
            elementAdd = "#div-additional-dishes";
        }
        $('.se-pre-con').show();
        $.ajax({
            url: '@Url.Action("CheckModifier","SBInventoryDishes")',
            data: {
                dataForm: $(form).serialize(),
                isModifier: isModifier
            },
            dataType: 'html',
            type: 'post',
            success: function (data) {
                $('.se-pre-con').hide();
                $(elementAdd).find('table:first > tbody:first').html(data);
            }
        });
    }

    function TickCheckBox(td) {
        var tr = $(td).parents('tr:first');
        $(tr).find('input[type=checkbox]').prop('checked', !$(tr).find('input[type=checkbox]').prop('checked'))
    }

    function SearchModifier(btn) {
        var keySearch = $(btn).parents('div.form-group:first').find('input').val().toLowerCase();
        var trs = $(btn).parents('.modal-body:first').find('tbody tr');

        var arrKeySearch = keySearch.split(' ');
        if (keySearch != '') {
            for (var i = 0; i < trs.length; i++) {
                var name = $.trim($(trs[i]).find('td:last').text());
                for (var j = 0; j < arrKeySearch.length; j++) {
                    if (name.toLowerCase().indexOf(arrKeySearch[j]) != -1) {
                        if ($(trs[i]).css('display') == 'none')
                            $(trs[i]).css('display', 'table-row');
                        break;
                    }
                    else
                        if ($(trs[i]).css('display') == 'table-row')
                            $(trs[i]).css('display', 'none');
                }
            }
        }
        else {
            $(trs).each(function (e) {
                if ($(this).css('display') == 'none')
                    $(this).css('display', 'table-row');
            });
        }
    }
    /*Modal Season*/
    function ShowModalSeason() {
        if (StoreID == '') {
            $('#errStore').show();
            return false;
        }
        $('#errStore').hide();
        var modal = $('#modalSeason').modal('show');
    }

    function SetProductNameSeason() {
        var productName = "";

        var countSeason = $(".NameSeason").length;
        var countChooseSeason = 0;
        $('.NameSeason').each(function (index, value) {
            var check = $(this).find('i');
            if (check.hasClass("fa-check")) {
                productName += $(this).attr('data-value') + ","
                countChooseSeason++;
            }
        });
        if (countSeason == countChooseSeason) {
            productName = "@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("All"))";
        }
        $("#txtKiosk").val(productName);
    }

    function ToggleChooseSeasonTime() {
        if ($(".chbcheckall").prop('checked')) {
            $("tr").val(1);
            $("tr").find('i').addClass("fa-check");
        }
        else {
            $("tr").val(9);
            $("tr").find('i').removeClass("fa-check");
        }
    }
    function ToggleChooseSeasonTimePOS() {
        if ($(".chbcheckallPOS").prop('checked')) {
            $("tr").val(1);
            $("tr").find('i').addClass("fa-check");
        }
        else {
            $("tr").val(9);
            $("tr").find('i').removeClass("fa-check");
        }
    }

    function ToggleSeason(tr) {
        var x = $(".NameSeason").find('i.fa-check').length;
        var tr = $(tr);
        var check = $(tr).find('i');
        if (check.hasClass("fa-check")) {
            $(tr).find('input.SeasonStatus').val(9);
            check.removeClass('fa-check');
            $(".chbcheckall").attr("checked", false);
        }
        else {
            $(tr).find('input.SeasonStatus').val(1);
            check.addClass('fa-check');
            if ($(".NameSeason").find('i.fa-check').length === $(".NameSeason").length) {
                $(".chbcheckall").prop('checked', true);
            }
            else {
                $(".chbcheckall").removeAttr("checked");
            }
        }
    }

    function ToggleSeasonPOS(tr) {
        var x = $(".NameSeasonPOS").find('i.fa-check').length;
        var tr = $(tr);
        var check = $(tr).find('i');
        if (check.hasClass("fa-check")) {
            $(tr).find('input.SeasonStatus').val(9);
            check.removeClass('fa-check');
            $(".chbcheckallPOS").attr("checked", false);
        }
        else {
            $(tr).find('input.SeasonStatus').val(1);
            check.addClass('fa-check');
            if ($(".NameSeasonPOS").find('i.fa-check').length === $(".NameSeasonPOS").length) {
                $(".chbcheckallPOS").prop('checked', true);
            }
            else {
                $(".chbcheckallPOS").removeAttr("checked");
            }
        }
    }

    /*Modal Printer*/
    function ShowModalPrinter() {
        if (StoreID == '') {
            $('#errStorePrinter').show();
            return false;
        }
        $('#errStorePrinter').hide();
        var modal = $('#modalPrinter').modal('show');
    }

    function SetNamePrinter() {
        var printerName = "";
        $('.PrinterSeason').each(function (index, value) {
            var check = $(this).find('i');
            if (check.hasClass("fa-check")) {
                printerName += $(this).attr('data-value') + ","
            }
        });
        $("#txtPrinter").val(printerName);
    }

    function TogglePrinter(tr) {
        var tr = $(tr);
        var check = $(tr).find('i');
        if (check.hasClass("fa-check")) {
            $(tr).find('input.PrinterStatus').val(9);
            check.removeClass('fa-check');
        }
        else {
            var countSelect = $(".PrinterSeason").find('i.fa-check').length;
            if (countSelect < 2) {
                $(tr).find('input.PrinterStatus').val(1);
                check.addClass('fa-check');
            }
        }

        //var countPrinter = $(".PrinterSeason").length;
        //if (countPrinter === countSelect) {
        //    $("#chkAllPrinter").prop('checked', true);
        //}
        //else {
        //    $("#chkAllPrinter").prop('checked', false);
        //}
    }

    //function ToggleAllPrinter(e) {
    //    if ($(e).prop('checked')) {
    //        $("tr").val(1);
    //        $("tr").find('i').addClass("fa-check");
    //    }
    //    else {
    //        $("tr").val(9);
    //        $("tr").find('i').removeClass("fa-check");
    //    }
    //}
    function ShowModalSeasonPOS() {
        if (StoreID == '') {
            $('#errStorePOS').show();
            return false;
        }
        $('#errStorePOS').hide();
        var modal = $('#modalSeasonPOS').modal('show');
    }

    $("#storeDdl").change(function () {
        StoreID = this.value;
        //StoreID = $(this).val();
        ItemType = '@NuWebNCloud.Shared.Commons.EProductType.Dish.ToString("d")';
        LoadCategory(".category");

    });

    function SetProductNameSeasonPOS() {
        var productName = "";

        var countSeason = $(".NameSeasonPOS").length;
        var countChooseSeason = 0;
        $('.NameSeasonPOS').each(function (index, value) {
            var check = $(this).find('i');
            if (check.hasClass("fa-check")) {
                productName += $(this).attr('data-value') + ","
                countChooseSeason++;
            }
        });
        if (countSeason == countChooseSeason) {
            productName = "@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("All"))";
        }
        $("#txtPOS").val(productName);
    }

    function showPictureUpload() {
        $('[id=urlImage]').click();
    }
</script>
