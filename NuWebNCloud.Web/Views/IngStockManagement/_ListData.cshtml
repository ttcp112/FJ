@model NuWebNCloud.Shared.Models.Ingredients.StockManagementViewModels
@using NuWebNCloud.Shared.Utilities;
<div class="table-responsive">
    <div class="x_panel">
        <div class="x_title">
            <h2>@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Stock Management")) </h2>
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <table id="datatable-responsive" class="table table-striped table-bordered dt-responsive nowrap table table-striped jambo_table bulk_action" cellspacing="0" style="width:100%;">
                <thead style="background-color:#34495e; color:#fff;">
                    <tr>
                        <th style="text-align:center; width:20px;"></th>
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Ingredient Code"))</th>
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Ingredient Name"))</th>
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("On Hand Quantity"))</th>
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Base UOM"))</th>
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("On Order"))</th>
                        @*<th style="text-align:center;">Blocked</th>*@
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Receiving UOM"))</th>
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Type"))</th>
                        <th style="text-align:center;">@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Store"))</th>
                        @*<th style="text-align:center;">Action</th>*@
                    </tr>
                </thead>
                <tbody>
                    @if (Model.ListItem != null)
                    {
                        for (int i = 0; i < Model.ListItem.Count; i++)
                        {
                            string styleRow = "row-evenItem";
                            if (i % 2 == 0)
                            {
                                styleRow = "row-oddItem";
                            }
                            var item = Model.ListItem[i];
                            <tr id="@item.Id" class="@styleRow">

                                @if (item.Status == 2)
                                {
                                    <td style="text-align:center;"><i data-toggle="tooltip" data-placement="top" title="@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Stock of ingredient are empty")) "><img src="~/Assets/Images/icon_outofstock.png" alt="outofstock" style="width:19px;" /></i></td>
                                }
                                else if (item.Status == 3)
                                {
                                   <td style="text-align:center;"><i data-toggle="tooltip" data-placement="top" title="@Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey("Low of Stock"))"><img src="~/Assets/Images/icon_lowstock.png" alt="lowstock" style="width:19px;"/></i></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                <td style="text-align:center;">@item.IngredientCode</td>
                                <td style="text-align:center;">@item.IngredientName</td>
                                @*<td style="text-align:center;">@item.Quantity.ToString("#,###.##")</td>*@
                                @*<td style="text-align:center;">@item.Quantity</td>*@
                                <td style="text-align:center;">@string.Format("{0:#,##0.####}", @item.Quantity)</td>
                                <td style="text-align:center;">@item.BaseUOM</td>
                                @*<td style="text-align:center;">@item.POQty</td>*@
                                <td style="text-align:center;">@string.Format("{0:#,##0.####}", @item.POQty)</td>
                                <td style="text-align:center;">@item.ReceivingUOM</td>
                                <td style="text-align:center;">
                                  @Html.Raw(_AttributeForLanguage.CurrentUser.GetLanguageTextFromKey(@item.Type))  
                                </td>
                                <td style="text-align:center; font-weight:bold;">@item.StoreName</td>
                               
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script type="text/javascript">
    function ShowView(url) {
        ShowViewOrEdit(url);
        return false;
    }

    $(document).ready(function () {
        var handleDataTableButtons = function () {
            if ($("#datatable-buttons").length) {
                $("#datatable-buttons").DataTable({

                    dom: "Bfrtip",
                    responsive: true
                });
            }
        };

        TableManageButtons = function () {
            "use strict";
            return {
                init: function () {
                    handleDataTableButtons();
                }
            };
        }();

        $('#datatable').dataTable();
        $('#datatable-keytable').DataTable({
            keys: true
        });

        $('#datatable-responsive').DataTable({
            "columnDefs": [
                { "type": "string-string-num", targets: 0 },
                { "orderable": false, "targets": [6] },
                { "width": "10%", "targets": [1, 2, 3, 4, 5,7] },
                { "width": "5%", "targets": 6 },
            ],
            "order": [[8, 'asc'], [2, 'asc']],
            "drawCallback": function (settings) {
                var api = this.api();
                var rows = api.rows({ page: 'current' }).nodes();
                var last = null;
                //Column Group
                api.column(8, { page: 'current' }).data().each(function (group, i) {
                    if (last !== group) {
                        $(rows).eq(i).before(
                            '<tr class="group"><td colspan="9"><strong style="color:#d9534f;">' + group + '</strong></td></tr>'
                        );
                        last = group;
                    }
                });
            }
        });

        var table = $('#datatable-fixed-header').DataTable({
            fixedHeader: true
        });

        TableManageButtons.init();
    });
</script>
